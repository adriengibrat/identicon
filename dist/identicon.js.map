{"version":3,"file":"identicon.js","sources":["../src/hash/sdbmcode.ts","../src/color/index.ts","../src/hash/index.ts","../src/scale/sinus.ts","../src/seed.ts","../src/scale/index.ts","../src/index.ts","../src/color/hsl2rgb.ts","../src/render/initial.ts","../src/render/invader.ts","../src/render/slack.ts"],"sourcesContent":["export const sdbmcode = (value: number, character: string) =>\n\tcharacter.charCodeAt(0) + (value << 6) + (value << 16) - value\n","import { seed } from '../seed'\nimport { hsl2rgb } from './hsl2rgb'\n\nexport const light = { hue: 1, saturation: [0.3, 0.7], light: [0.2, 0.5] }\nexport const dark = { hue: 1, saturation: [0.3, 0.7], light: [0.5, 0.8] }\n\nexport const color = (settings) => {\n\tconst hsl = seed(settings)\n\treturn (source: string) =>\n\t`#${hsl2rgb(hsl(source))\n\t\t.map(channel => `0${Math.round(channel * 255).toString(16)}`.substr(-2))\n\t\t.join('')}`\n}\n","export const hash = fn => (string, init = 0) =>\n\tArray.from(string).reduce<typeof init>(fn, init)\n\nexport { hashcode } from './hashcode'\nexport { sdbmcode } from './sdbmcode'\n","export const sinus = {\n\tfn: Math.sin,\n\tmin: -1,\n\tmax: 1,\n}\n","import { hash as _hash, sdbmcode } from './hash'\nimport { scale as _scale, sinus } from './scale'\n\nexport type Shape = {\n\t[key: string]:\n\t\t| number\n\t\t| [number, number]\n\t\t| [number, number, (x: any) => number]\n}\ntype Seed<S> = { [key in keyof S]: number }\n\nexport const seed = <S = Shape>(\n\tshape: S,\n\t{ hash = _hash(sdbmcode), scale = _scale(sinus) } = {},\n) => (source: string) => {\n\tconst base = hash(source)\n\treturn Object.keys(shape).reduce(\n\t\t(generated, key) => {\n\t\t\tconst [max, min] = [].concat(shape[key])\n\t\t\treturn Object.assign(generated, {\n\t\t\t\t[key]: scale(hash(key, base), max, min),\n\t\t\t})\n\t\t},\n\t\t{} as Seed<S>,\n\t)\n}\n","export { cosinus } from './cosinus'\nexport { sinus } from './sinus'\n\nexport const scale = ({ fn, max, min }) => (n, rangemax, rangemin = 0) =>\n\t(fn(n) - min) / (max - min) * (rangemax - rangemin) + rangemin\n","import { color as _color, light } from './color'\nimport { hash as _hash, sdbmcode } from './hash'\nimport * as render from './render'\nimport { seed } from './seed'\n\nconst hash = _hash(sdbmcode)\nconst color = _color(light)\n\nexport const initial = (source: string, { size = 128, margin = 0 } = {}) =>\n\trender.initial(\n\t\tsource.split(/[\\s\\.\\-]/, 3).map(x => x.charAt(0).toUpperCase()).join(' '),\n\t\tcolor(source),\n\t\tsize,\n\t\tmargin,\n\t)\n\nexport const invader = (source: string, { size = 128, margin = 0 } = {}) =>\n\trender.invader(\n\t\tArray.from(hash(source).toString(2).substr(15), x => x == '1'),\n\t\tcolor(source),\n\t\tsize,\n\t\tmargin,\n\t)\n\nexport const slack = (source: string, { size = 128 } = {}) => {\n\tconst { rotate, scale } = seed({ rotate: 360, scale: [1, 1.5] })(source)\n\treturn render.slack(\n\t\trotate,\n\t\tscale,\n\t\t[color(source), color(source.split('').reverse().join(''))],\n\t\tsize,\n\t)\n}\n","const HUE_FACTOR = 360 / 60\n// credits:\n// https://en.wikipedia.org/wiki/HSL_and_HSV\n// https://gist.github.com/aemkei/1325937\nexport const hsl2rgb = ({ hue = 0, saturation = 0, light = 0 }) => {\n\tconst hsl = { hue, saturation, light }\n\tObject.keys(hsl).forEach(key => {\n\t\tif (hsl[key] < 0 || hsl[key] > 1)\n\t\t\tthrow RangeError(`\"${key}\" value \"${hsl[key]}\" is out of range`)\n\t})\n\thue *= HUE_FACTOR\n\tconst chroma = (1 - Math.abs(2 * light - 1)) * saturation\n\tconst component = chroma * (1 - Math.abs(hue % 2 - 1))\n\tconst lightness = light - chroma / 2\n\tconst chanels = [chroma + lightness, component + lightness, lightness]\n\treturn [hue | 8, hue | 16, Math.floor(hue)].map(index => chanels[index % 3])\n}\n","export const initial = (text: string, color: string, size: number, margin: number) => {\n\tconst center = size / 2\n\treturn `<svg height=\"${size}\" width=\"${size}\">\n\t<rect height=\"${size}\" width=\"${size}\" fill=\"${color}\"/>\n\t<text x=\"${center}\" y=\"${center}\" fill=\"#fff\" font-family=\"Arial\" font-size=\"${Math.round((size - 2 * margin) / 3)}\" text-anchor=\"middle\" alignment-baseline=\"central\">${text}</text>\n</svg>`\n}\n","const rows = 5\n\nexport const invader = (dots: boolean[], color: string, size: number, margin: number) => {\n\tconst dotSize = Math.floor((size - 2 * margin) / rows) - 1\n\tmargin = (size - rows * dotSize) / 2\n\tconst dotId = `dot-${size}-${margin}-${color}`\n\tconst dotsId = `dots-${dots}-${dotId}`\n\treturn `<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${size}\" height=\"${size}\">\n\t<defs>\n\t\t<rect id=\"${dotId}\" width=\"${dotSize}\" height=\"${dotSize}\" transform=\"translate(${margin},${margin})\" fill=\"${color}\" shape-rendering=\"optimizeSpeed\"/>\n\t</defs>\n\t<g id=\"${dotsId}\">${dots\n\t\t.map(\n\t\t\t(dot, index) =>\n\t\t\t\tdot\n\t\t\t\t\t? `\n\t\t<use xlink:href=\"#${dotId}\" x=\"${Math.floor(index / rows) *\n\t\t\t\t\t\t\tdotSize}\" y=\"${(index % rows) * dotSize}\"/>`\n\t\t\t\t\t: '',\n\t\t)\n\t\t.join('')}\n\t</g>\n\t<use xlink:href=\"#${dotsId}\" transform=\"translate(${size}) scale(-1, 1)\"/>\n</svg>`\n}\n","export const slack = (rotate: number, scale: number, colors: string[], size: number) => {\n\tconst width = size / 5\n\tconst round = width / 2\n\tconst barsId = `bars-${size}-${colors}`\n\treturn `<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"${size}\" height=\"${size}\">\n\t<defs>\n\t\t<g id=\"${barsId}\">\n\t\t\t<rect width=\"${size}\" height=\"${width}\" rx=\"${round}\" ry=\"${round}\"\n\t\t\t\tfill=\"${colors[0]}88\" transform=\"translate(0, ${width})\"/>\n\t\t\t<rect width=\"${width}\" height=\"${size}\" rx=\"${round}\" ry=\"${round}\"\n\t\t\t\tfill=\"${colors[1]}88\" transform=\"translate(${width})\"/>\n\t\t</g>\n\t</defs>\n\t<g transform=\"rotate(${rotate}) scale(${scale})\" transform-origin=\"center center\">\n\t\t<use xlink:href=\"#${barsId}\"/>\n\t\t<use xlink:href=\"#${barsId}\" transform=\"translate(${size}, ${size}) scale(-1, -1)\"/>\n\t</g>\n</svg>`\n}\n"],"names":["hsl","sdbmcode","value","character","charCodeAt","hash","fn","string","init","Array","from","reduce","sinus","Math","sin","min","max","seed","shape","_a","_b","_c","_d","scale","n","rangemax","rangemin","source","base","Object","keys","generated","key","assign","_hash","color","hue","saturation","light","forEach","RangeError","chroma","abs","lightness","chanels","floor","map","index","hsl2rgb","channel","round","toString","substr","join","size","margin","text","center","render.initial","split","x","charAt","toUpperCase","dots","dotSize","dotId","dotsId","dot","render.invader","rotate","colors","width","barsId","render.slack","reverse"],"mappings":"AAAO,ICOAA,EDPMC,EAAW,SAACC,EAAeC,GACvC,OAAAA,EAAUC,WAAW,IAAMF,GAAS,IAAMA,GAAS,IAAMA,GED7CG,EAAO,SAAAC,GAAM,OAAA,SAACC,EAAQC,GAClC,oBADkCA,KAClCC,MAAMC,KAAKH,GAAQI,OAAoBL,EAAIE,KCD/BI,GACZN,GAAIO,KAAKC,IACTC,KAAM,EACNC,IAAK,GCQOC,EAAO,SACnBC,EACAC,OAAAC,kBAAEC,SAAAhB,oBAAwBiB,UAAAC,aCVN,SAACJ,OAAEb,OAAIU,QAAKD,QAAU,OAAA,SAACS,EAAGC,EAAUC,GACxD,oBADwDA,MACvDpB,EAAGkB,GAAKT,IAAQC,EAAMD,IAAQU,EAAWC,GAAYA,SDUlD,OAAA,SAACC,GACL,IAAMC,EAAOvB,EAAKsB,GAClB,OAAOE,OAAOC,KAAKZ,GAAOP,OACzB,SAACoB,EAAWC,SACLZ,kBAACJ,OAAKD,OACZ,OAAOc,OAAOI,OAAOF,UACnBC,GAAMT,EAAMlB,EAAK2B,EAAKJ,GAAOZ,EAAKD,cEfjCV,EAAO6B,EAAMjC,GACbkC,GLCCnC,EAAMiB,GAJUmB,IAAK,EAAGC,YAAa,GAAK,IAAMC,OAAQ,GAAK,MAK5D,SAACX,GACR,MAAA,IMLsB,SAACR,OAAEC,QAAAgB,iBAASf,eAAAgB,iBAAgBf,UAAAgB,iBAC5CtC,GAAQoC,MAAKC,aAAYC,SAC/BT,OAAOC,KAAK9B,GAAKuC,QAAQ,SAAAP,GACxB,GAAIhC,EAAIgC,GAAO,GAAKhC,EAAIgC,GAAO,EAC9B,MAAMQ,WAAW,IAAIR,cAAehC,EAAIgC,0BAE1CI,GAVkB,EAWlB,IAAMK,GAAU,EAAI5B,KAAK6B,IAAI,EAAIJ,EAAQ,IAAMD,EAEzCM,EAAYL,EAAQG,EAAS,EAC7BG,GAAWH,EAASE,EAFRF,GAAU,EAAI5B,KAAK6B,IAAIN,EAAM,EAAI,IAEFO,EAAWA,GAC5D,OAAc,EAANP,EAAe,GAANA,EAAUvB,KAAKgC,MAAMT,IAAMU,IAAI,SAAAC,GAAS,OAAAH,EAAQG,EAAQ,KNNrEC,CAAQhD,EAAI2B,IACdmB,IAAI,SAAAG,GAAW,OAAA,IAAIpC,KAAKqC,MAAgB,IAAVD,GAAeE,SAAS,KAAMC,QAAQ,KACpEC,KAAK,sBKHe,SAAC1B,EAAgBR,OAAAC,kBAAEC,SAAAiC,mBAAYhC,WAAAiC,iBACrD,OETsB,SAACC,EAAcrB,EAAemB,EAAcC,GAClE,IAAME,EAASH,EAAO,EACtB,MAAO,gBAAgBA,cAAgBA,yBACvBA,cAAgBA,aAAenB,qBACpCsB,UAAcA,kDAAsD5C,KAAKqC,OAAOI,EAAO,EAAIC,GAAU,0DAAyDC,oBFKzKE,CACC/B,EAAOgC,MAAM,WAAY,GAAGb,IAAI,SAAAc,GAAK,OAAAA,EAAEC,OAAO,GAAGC,gBAAeT,KAAK,KACrElB,EAAMR,GACN2B,EACAC,oBAGqB,SAAC5B,EAAgBR,OAAAC,kBAAEC,SAAAiC,mBAAYhC,WAAAiC,iBACrD,OGfsB,SAACQ,EAAiB5B,EAAemB,EAAcC,GACrE,IAAMS,EAAUnD,KAAKgC,OAAOS,EAAO,EAAIC,GAH3B,GAG6C,EAEnDU,EAAQ,OAAOX,OADrBC,GAAUD,EAJE,EAIYU,GAAW,OACI7B,EACjC+B,EAAS,QAAQH,MAAQE,EAC/B,MAAO,0DAA0DX,eAAiBA,iCAErEW,cAAiBD,eAAoBA,4BAAiCT,MAAUA,cAAkBpB,8DAEtG+B,OAAWH,EAClBjB,IACA,SAACqB,EAAKpB,GACL,OAAAoB,EACG,2BACeF,UAAapD,KAAKgC,MAAME,EAhBjC,GAiBNiB,UAAgBjB,EAjBV,EAiB0BiB,QAChC,KAEJX,KAAK,qCAEaa,4BAAgCZ,8BHLpDc,CACC3D,MAAMC,KAAKL,EAAKsB,GAAQwB,SAAS,GAAGC,OAAO,IAAK,SAAAQ,GAAK,MAAK,KAALA,IACrDzB,EAAMR,GACN2B,EACAC,kBAGmB,SAAC5B,EAAgBR,OAAEC,yBAAAkC,mBACjCjC,mCACN,OI1BoB,SAACgD,EAAgB9C,EAAe+C,EAAkBhB,GACtE,IAAMiB,EAAQjB,EAAO,EACfJ,EAAQqB,EAAQ,EAChBC,EAAS,QAAQlB,MAAQgB,EAC/B,MAAO,0DAA0DhB,eAAiBA,8BAExEkB,4BACOlB,eAAiBiB,WAAcrB,WAAcA,sBACnDoB,EAAO,kCAAiCC,8BAClCA,eAAkBjB,WAAaJ,WAAcA,sBACnDoB,EAAO,+BAA8BC,uDAGzBF,aAAiB9C,iEACnBiD,gCACAA,4BAAgClB,OAASA,uCJWvDmB,mBAGLtC,EAAMR,GAASQ,EAAMR,EAAOgC,MAAM,IAAIe,UAAUrB,KAAK,MACtDC"}